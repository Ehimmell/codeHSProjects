var INPUT_S = readInt("Squared Term:   ");
var INPUT_X = readInt("X Term:    ");
var INPUT_C = readInt("Constant:    ");

function transToRoots() {
    var quadQuos = [];
    var quadDivs = [];
    var conQuos = [];
    var conDivs = [];
    
    var quadRead = Math.abs(INPUT_S);
    var conRead = Math.abs(INPUT_C);
    
    for (var i = 0; i < quadRead + 1; i++) {
        if(quadRead % i == 0) {
            quadQuos.push(INPUT_S/ i);
            quadDivs.push(i);
            quadQuos.push(-(INPUT_S / i));
            if(INPUT_S < 0) {
                quadQuos.push(-(INPUT_S / i));
                quadDivs.push(-i);
            }
            
        }
    } if(conRead != 0) {
        for (var i = 0; i < conRead + 1; i++) {
            if(conRead % i == 0) {
                conQuos.push(INPUT_C/ i);
                conDivs.push(i);
                conQuos.push(-(INPUT_C / i));
                conDivs.push(-i);
            }
        }
    }
    var tick = 0;
    while(tick == 0) {
        
        var sLen = quadQuos.length;
        var cLen = conQuos.length;
        var r1 = Randomizer.nextInt(0, sLen - 1);
        var r2 = Randomizer.nextInt(0, cLen - 1);
        
        var x = {t1: quadDivs[r1], t2: quadQuos[r1]};
        
        var c = {t1: conDivs[r2], t2: conQuos[r2]};
        
        var s1 = x.t1 * c.t2;
        var s2 = x.t2 * c.t1;
        var simplified = s1 + s2;
        var cSimp = c.t1 * c.t2;
        
        var root1 = -(c.t1 / x.t1);
        var root2 = -(c.t2 / x.t2);
        var sR1 = (Math.abs(root1) * Math.abs(root1)) * INPUT_S;
        var sR2 = (Math.abs(root2) * Math.abs(root2)) * INPUT_S;
        
        var multX1 = INPUT_X * root1;
        var multX2 = INPUT_X * root2;
        var sumOf1 = sR1 + multX1;
        var sumOf2 = sR2 + multX2;
            
        var one = sumOf1 + INPUT_C;
        var two = sumOf2 + INPUT_C;
        
        if((simplified == INPUT_X) && (cSimp == INPUT_C) && (one == 0) && (two == 0)){
            println("simp" + simplified);
            println("c simp" + cSimp);
            println("s1 " + x.t1 * c.t2);
            println("s2 " + x.t2 * c.t1);
            println("xt1 " + x.t1);
            println("xt2 " + x.t2);
            println("ct1 " + c.t1);
            println("ct2 " + c.t2);
            println("simp" + (c.t2 + c.t1))
            println("(" + x.t1 + ", " + c.t1 + ")("+ x.t2 + ", " + c.t2 + ")");
            println("Root one: " + root1);
            println("Root two: " + root2);
            tick++;
        }
    }
}
function start() {
    println(INPUT_S + "x^2, " + INPUT_X + "x, " + INPUT_C);
    transToRoots();
}
